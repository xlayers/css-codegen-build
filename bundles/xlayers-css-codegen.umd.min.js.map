{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@xlayers/css-codegen/lib/css-context.service.ts","ng://@xlayers/css-codegen/lib/css-parser.service.ts","ng://@xlayers/css-codegen/lib/css-aggregator.service.ts","ng://@xlayers/css-codegen/lib/css-codegen.service.ts","ng://@xlayers/css-codegen/lib/css-codegen.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","r","e","ar","push","error","__spread","concat","CssContextService","identify","current","includes","of","css","put","nextContext","clear","web","Injectable","args","providedIn","CssParserService","styleHelperService","cssContext","symbolService","layerService","compute","data","options","_this","_class","layers","forEach","layer","flattenLayer","visit","frame","x","y","walk","visitSymbol","force","visitContent","symbolMaster","lookup","generateClassName","className","generateCssClassName","visitRectangleStyle","visitTextStyle","visitOvalStyle","visitLayerStyle","rules","extractFrame","extractRotation","extractBorderRadius","extractOpacity","extractBorders","extractFills","extractShadows","pseudoElements","before","extractBlurPseudoElement","addOvalShape","extractTextFont","extractTextColor","extractParagraphStyle","display","position","left","top","width","height","visibility","isVisible","obj","style","textStyle","encodedAttributes","color","parseColorAsRgba","MSAttributedStringColorAttribute","MSAttributedStringFontAttribute","font-family","attributes","name","font-size","size","border-radius","opacity","fixedRadius","rotation","transform","blur","radius","objFill","fills","firstFill","isEnabled","fillColor","content","bottom","right","background","box-shadow","filter","toFixed","INSIDE","OUTSIDE","CENTER","borders","bordersStyles","reduce","acc","border","thickness","borderColor","inset","BorderType","join","blurObj","extractFillGradient","overflow","background-color","fill","gradient","fillsStyles","stops","map","stop","innerShadow","extractInnerShadow","outterShadow","extractOuterShadow","innerShadows","shadowColor","offsetX","offsetY","blurRadius","spread","outerShadows","shadows","shadow","randomString","Math","random","toString","substring","cssPrefix","StyleService","SymbolService","LayerService","CssAggregatorService","formatService","indentationSymbol","hostStyle","aggregate","styles","buildAstStyleSheet","postProcessCss","buildPseudoElementStyle","reGenerateStyleSheet","fileName","normalizeName","kind","combineStyles","language","uri","componentDir","declarations","cssStyle","generateCssStyle","rule","computeStyle","_current","Array","isArray","name_1","entries","_a","_b","prop","_styles","name_2","rules_1","stylesAst","duplicates","currentIndex","checkingDecIndex","currentDeclaration","currentDeclarationSet","Set","sort","nextDeclaration","checkDeclarationpropertieset","tslib_1.__values","from","values","_c","key","has","delete","setValuesInAst","reduceDuplicates","deDuplicateCssValues","index","_array","FormatService","CssCodeGenService","cssParser","cssAggretatorService","compileOptions","context","CssCodeGenModule","NgModule","imports","SketchLibModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CssCodeGenContext } from './css-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssContextService {\r\n  identify(current: SketchMSLayer) {\r\n    return [\r\n      'rect',\r\n      'page',\r\n      'rectangle',\r\n      'group',\r\n      'oval',\r\n      'slice',\r\n      'MSImmutableHotspotLayer',\r\n      'text',\r\n      'triangle',\r\n      'shapePath',\r\n      'shapeGroup'\r\n    ].includes(current._class as string);\r\n  }\r\n\r\n  of(current: SketchMSLayer) {\r\n    return (current as any).css;\r\n  }\r\n\r\n  put(current: SketchMSLayer, nextContext: CssCodeGenContext) {\r\n    (current as any).css = { ...this.of(current), ...nextContext };\r\n  }\r\n\r\n  clear(current: SketchMSLayer) {\r\n    delete (current as any).web;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LayerService, StyleService, SymbolService } from '@xlayers/sketch-lib';\r\n\r\nimport { CssCodeGenOptions } from './css-codegen';\r\nimport { CssContextService } from './css-context.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssParserService {\r\n  constructor(\r\n    private styleHelperService: StyleService,\r\n    private cssContext: CssContextService,\r\n    private readonly symbolService: SymbolService,\r\n    private readonly layerService: LayerService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (current._class === 'page') {\r\n      current.layers.forEach(layer => {\r\n        this.flattenLayer(layer);\r\n        this.visit(layer, data, options);\r\n      });\r\n    } else {\r\n      this.visit(current, data, options);\r\n    }\r\n  }\r\n\r\n  private flattenLayer(current: SketchMSLayer) {\r\n    current.frame.x = 0;\r\n    current.frame.y = 0;\r\n  }\r\n\r\n  private walk(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (this.layerService.identify(current)) {\r\n      current.layers.forEach(layer => {\r\n        this.visit(layer, data, options);\r\n      });\r\n    } else if (this.symbolService.identify(current)) {\r\n      return this.visitSymbol(current, data, options);\r\n    }\r\n  }\r\n\r\n  private visit(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (options.force) {\r\n      this.cssContext.clear(current);\r\n    }\r\n    if (this.cssContext.identify(current)) {\r\n      if (!this.cssContext.of(current)) {\r\n        this.visitContent(current, options);\r\n      }\r\n    }\r\n    this.walk(current, data, options);\r\n  }\r\n\r\n  private visitSymbol(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    const symbolMaster = this.symbolService.lookup(current, data);\r\n    if (symbolMaster) {\r\n      this.compute(symbolMaster, data, options);\r\n    }\r\n  }\r\n\r\n  private visitContent(current: SketchMSLayer, options: CssCodeGenOptions) {\r\n    if (options.generateClassName) {\r\n      this.cssContext.put(current, {\r\n        className: this.generateCssClassName(options)\r\n      });\r\n    }\r\n\r\n    switch (current._class as string) {\r\n      case 'rectangle':\r\n        this.visitRectangleStyle(current);\r\n        break;\r\n\r\n      case 'text':\r\n        this.visitTextStyle(current);\r\n        break;\r\n\r\n      case 'oval':\r\n        this.visitOvalStyle(current);\r\n        break;\r\n\r\n      default:\r\n        this.visitLayerStyle(current);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private visitLayerStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractRotation(current),\r\n        ...this.extractBorderRadius(current),\r\n        ...this.extractOpacity(current)\r\n      }\r\n    });\r\n  }\r\n\r\n  private visitRectangleStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractBorders(current),\r\n        ...this.extractFills(current),\r\n        ...this.extractShadows(current)\r\n      },\r\n      pseudoElements: { before: this.extractBlurPseudoElement(current) }\r\n    });\r\n  }\r\n\r\n  private visitOvalStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.addOvalShape(),\r\n        ...this.extractFrame(current),\r\n        ...this.extractBorders(current),\r\n        ...this.extractFills(current),\r\n        ...this.extractShadows(current)\r\n      },\r\n      pseudoElements: { before: this.extractBlurPseudoElement(current) }\r\n    });\r\n  }\r\n\r\n  private visitTextStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractTextFont(current),\r\n        ...this.extractTextColor(current),\r\n        ...this.extractParagraphStyle(current)\r\n      }\r\n    });\r\n  }\r\n\r\n  private extractFrame(current: SketchMSLayer) {\r\n    if (current.frame) {\r\n      return {\r\n        display: 'block',\r\n        position: 'absolute',\r\n        left: `${current.frame.x}px`,\r\n        top: `${current.frame.y}px`,\r\n        width: `${current.frame.width}px`,\r\n        height: `${current.frame.height}px`,\r\n        visibility: current.isVisible ? 'visible' : 'hidden'\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  private extractTextColor(current: SketchMSLayer) {\r\n    const obj = current.style.textStyle.encodedAttributes;\r\n\r\n    if (obj.hasOwnProperty('MSAttributedStringColorAttribute')) {\r\n      return {\r\n        color: this.styleHelperService.parseColorAsRgba(\r\n          obj.MSAttributedStringColorAttribute\r\n        )\r\n      };\r\n    } else if (obj.hasOwnProperty('NSColor')) {\r\n      // TODO: Handle legacy\r\n      // const archive =\r\n      // this.binaryPlistParser.parse64Content(obj.NSColor._archive);\r\n      // (scope.style.textStyle.encodedAttributes.NSColor as any)._transformed =\r\n      // archive;\r\n      return {};\r\n    }\r\n\r\n    return { color: 'black' };\r\n  }\r\n\r\n  private extractParagraphStyle(current: SketchMSLayer) {\r\n    const obj = current.style.textStyle.encodedAttributes;\r\n\r\n    if (obj.hasOwnProperty('NSParagraphStyle')) {\r\n      // TODO: Handle legacy\r\n      // const archive =\r\n      // this.binaryPlistParser.parse64Content(scope.style.textStyle.encodedAttributes.NSParagraphStyle._archive);\r\n      // (scope.style.textStyle.encodedAttributes.NSParagraphStyle as\r\n      // any)._transformed = archive;\r\n      return {};\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractTextFont(current: SketchMSLayer) {\r\n    const obj =\r\n      current.style.textStyle.encodedAttributes.MSAttributedStringFontAttribute;\r\n\r\n    if (obj.hasOwnProperty('_class') && obj._class === 'fontDescriptor') {\r\n      return {\r\n        'font-family': `'${obj.attributes.name}', 'Roboto', 'sans-serif'`,\r\n        'font-size': `${obj.attributes.size}px`\r\n      };\r\n    } else if (obj.hasOwnProperty('_archive')) {\r\n      // TODO: Handle legacy\r\n      // const archive = this.binaryPlistParser.parse64Content(obj._archive);\r\n      // (scope.style.textStyle.encodedAttributes.MSAttributedStringFontAttribute\r\n      // as any)._transformed = archive;\r\n      return {};\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private addOvalShape() {\r\n    return { 'border-radius': '50%' };\r\n  }\r\n\r\n  private extractOpacity(current: SketchMSLayer) {\r\n    return (current as any).opacity\r\n      ? { opacity: `${(current as any).opacity}` }\r\n      : {};\r\n  }\r\n\r\n  private extractBorderRadius(current: SketchMSLayer) {\r\n    const obj = (current as any).fixedRadius;\r\n    return obj ? { 'border-radius': `${obj.fixedRadius}px` } : {};\r\n  }\r\n\r\n  private extractRotation(current: SketchMSLayer) {\r\n    const obj = (current as any).rotation;\r\n    return obj ? { transform: `rotate(${current.rotation}deg)` } : {};\r\n  }\r\n\r\n  private extractBlurPseudoElement(current: SketchMSLayer) {\r\n    const obj = (current as any).style.blur;\r\n    if (obj && obj.hasOwnProperty('radius') && obj.radius > 0) {\r\n      const objFill = (current as any).style.fills;\r\n\r\n      if (objFill && objFill.length > 0) {\r\n        // we only support one fill: take the first one!\r\n        // ignore the other fills\r\n        const firstFill = objFill[0];\r\n\r\n        if (firstFill.isEnabled) {\r\n          const fillColor = this.styleHelperService.parseColorAsRgba(\r\n            firstFill.color\r\n          );\r\n\r\n          return {\r\n            height: `${current.frame.height + 50}px`,\r\n            width: `${current.frame.width + 50}px`,\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            top: '-25px',\r\n            left: '-25px',\r\n            bottom: '0',\r\n            right: '0',\r\n            background: 'inherit',\r\n            'box-shadow': `inset 0 0 0 ${current.frame.width /\r\n              2}px ${fillColor}`,\r\n            filter: `blur(${obj.radius.toFixed(2)}px)`\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractBorders(current: SketchMSLayer) {\r\n    enum BorderType {\r\n      INSIDE = 1,\r\n      OUTSIDE = 2,\r\n      CENTER = 0\r\n    }\r\n\r\n    const obj = (current as any).style.borders;\r\n\r\n    if (obj && obj.length > 0) {\r\n      const bordersStyles = obj.reduce((acc, border) => {\r\n        if (border.thickness > 0) {\r\n          const borderColor = this.styleHelperService.parseColorAsRgba(\r\n            border.color\r\n          );\r\n          const inset = border.position === BorderType.INSIDE ? 'inset' : '';\r\n          const shadow = [\r\n            `0 0 0 ${border.thickness}px ${borderColor}`,\r\n            inset\r\n          ].join(' ');\r\n\r\n          return [shadow, ...acc];\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      if (bordersStyles.length > 0) {\r\n        return { 'box-shadow': bordersStyles.join(',') };\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractFills(current: SketchMSLayer) {\r\n    const obj = (current as any).style.fills;\r\n\r\n    if (obj && obj.length > 0) {\r\n      // we only support one fill: take the first one!\r\n      // ignore the other fills\r\n      const firstFill = obj[0];\r\n\r\n      if (firstFill.isEnabled) {\r\n        const fillColor = this.styleHelperService.parseColorAsRgba(\r\n          firstFill.color\r\n        );\r\n\r\n        const blurObj = (current as any).style.blur;\r\n        if (blurObj && blurObj.hasOwnProperty('radius') && blurObj.radius > 0) {\r\n          return {\r\n            ...this.extractFillGradient(firstFill),\r\n            background: 'inherit',\r\n            overflow: 'hidden',\r\n            'background-color': fillColor\r\n          };\r\n        } else {\r\n          return {\r\n            ...this.extractFillGradient(firstFill),\r\n            'background-color': fillColor\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractFillGradient(fill) {\r\n    if (fill.gradient) {\r\n      const fillsStyles = fill.gradient.stops.map(stop => {\r\n        const position =\r\n          stop.position >= 0 && stop.position <= 1\r\n            ? ` ${stop.position * 100}%`\r\n            : '';\r\n        const fillColor = this.styleHelperService.parseColorAsRgba(stop.color);\r\n\r\n        return `${fillColor}${position}`;\r\n      });\r\n\r\n      if (fillsStyles.length > 0) {\r\n        // apply gradient, if multiple fills\r\n        // default angle is 90deg\r\n        return {\r\n          background: `linear-gradient(90deg, ${fillsStyles.join(',')})`\r\n        };\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractShadows(current: SketchMSLayer) {\r\n    const innerShadow = this.extractInnerShadow(current);\r\n    const outterShadow = this.extractOuterShadow(current);\r\n\r\n    return innerShadow + outterShadow !== ''\r\n      ? { 'box-shadow': innerShadow + outterShadow }\r\n      : {};\r\n  }\r\n\r\n  private extractInnerShadow(current: SketchMSLayer) {\r\n    const innerShadows = (current as any).style.innerShadows;\r\n\r\n    if (innerShadows) {\r\n      return innerShadows.map(innerShadow => {\r\n        const shadowColor = this.styleHelperService.parseColorAsRgba(\r\n          innerShadow.color\r\n        );\r\n\r\n        return [\r\n          `${innerShadow.offsetX}px`,\r\n          `${innerShadow.offsetY}px`,\r\n          `${innerShadow.blurRadius}px`,\r\n          `${innerShadow.spread}px`,\r\n          `${shadowColor}`,\r\n          `inset`\r\n        ].join(' ');\r\n      });\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private extractOuterShadow(current: SketchMSLayer) {\r\n    const outerShadows = (current as any).style.shadows;\r\n    if (outerShadows) {\r\n      return outerShadows.map(shadow => {\r\n        const shadowColor = this.styleHelperService.parseColorAsRgba(\r\n          shadow.color\r\n        );\r\n\r\n        return [\r\n          `${shadow.offsetX}px`,\r\n          `${shadow.offsetY}px`,\r\n          `${shadow.blurRadius}px`,\r\n          `${shadow.spread}px`,\r\n          `${shadowColor}`\r\n        ].join(' ');\r\n      });\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private generateCssClassName(options: CssCodeGenOptions) {\r\n    const randomString = Math.random()\r\n      .toString(36)\r\n      .substring(2, 6);\r\n\r\n    return `${options.cssPrefix}${randomString}`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CssContextService } from './css-context.service';\r\nimport { CssCodeGenOptions } from './css-codegen';\r\nimport { FormatService } from '@xlayers/sketch-lib';\r\n\r\ninterface StyleList {\r\n  className: string;\r\n  declarations: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssAggregatorService {\r\n  constructor(\r\n    private readonly formatService: FormatService,\r\n    private cssContext: CssContextService\r\n  ) {}\r\n\r\n  private indentationSymbol = `  `; // 2 spaces ftw\r\n  // default host style\r\n  private hostStyle = [\r\n    ':host {',\r\n    `${this.indentationSymbol}display: block;`,\r\n    `${this.indentationSymbol}position: relative;`,\r\n    '}',\r\n    ''\r\n  ].join('\\n');\r\n\r\n  /**\r\n   * This will parse the ast to return a optimized css stylesheet\r\n   * @param current SketchMSLayer the ast based on sketch json\r\n   */\r\n  aggregate(current: SketchMSLayer, options?: CssCodeGenOptions) {\r\n    const styles: Array<StyleList> = [];\r\n    this.buildAstStyleSheet(styles, current);\r\n    this.postProcessCss(styles);\r\n    this.buildPseudoElementStyle(styles, current);\r\n    const reGenerateStyleSheet = this.reGenerateStyleSheet(styles);\r\n\r\n    const fileName = this.formatService.normalizeName(current.name);\r\n    return [\r\n      {\r\n        kind: 'css',\r\n        value: this.combineStyles(reGenerateStyleSheet),\r\n        language: 'css',\r\n        uri: `${options.componentDir}/${fileName}.css`\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * The complete string of css style\r\n   * @param styles string of stylesheet\r\n   */\r\n  private combineStyles(styles: string): string {\r\n    return `${this.hostStyle} \\n${styles}`;\r\n  }\r\n\r\n  /**\r\n   * Map over styles with normal css output\r\n   * @param styles optimized list of styles\r\n   */\r\n  private reGenerateStyleSheet(styles: StyleList[]) {\r\n    return styles\r\n      .filter(e => e.declarations.length > 0)\r\n      .map(cssStyle => this.generateCssStyle(cssStyle).join('\\n'))\r\n      .join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Parse stylelist to understandable css class definition\r\n   * @param style the declaration of style\r\n   */\r\n  private generateCssStyle(style: StyleList): string[] {\r\n    return [\r\n      `.${style.className} {`,\r\n      style.declarations.map(rule => this.indentationSymbol + rule).join('\\n'),\r\n      '}',\r\n      ''\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Parse style pseudo element without any pre processing\r\n   * @param styles curent created list\r\n   * @param current  sketch ast\r\n   */\r\n  private buildPseudoElementStyle(styles: StyleList[], current: SketchMSLayer) {\r\n    const computeStyle = (_current: SketchMSLayer) => {\r\n      const content = (name: string, data: string[]) => {\r\n        if (data) {\r\n          styles.push({ className: name, declarations: data });\r\n        }\r\n      };\r\n      if (_current.layers && Array.isArray(_current.layers)) {\r\n        _current.layers.forEach(layer => {\r\n          if (this.cssContext.identify(layer)) {\r\n            const name = `${(layer as any).css.className}`;\r\n            if ((layer.css as any).pseudoElements) {\r\n              Object.entries((layer.css as any).pseudoElements).forEach(\r\n                ([prop, value]) => {\r\n                  content(\r\n                    `${name}:${prop}`,\r\n                    Object.entries(value).map(\r\n                      ([ruleKey, ruleValue]) => `${ruleKey}: ${ruleValue};`\r\n                    )\r\n                  );\r\n                }\r\n              );\r\n\r\n              computeStyle(layer);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    computeStyle(current);\r\n  }\r\n\r\n  /**\r\n   * This is the main ast parser to go from sketch to css\r\n   * @param styles newly created list\r\n   * @param current  sketch ast\r\n   */\r\n  private buildAstStyleSheet(\r\n    styles: StyleList[],\r\n    current: SketchMSLayer\r\n  ): void {\r\n    const computeStyle = (_current: SketchMSLayer, _styles) => {\r\n      const content = (name: string, data: string[]) => {\r\n        if (data) {\r\n          styles.push({ className: name, declarations: data });\r\n        }\r\n      };\r\n      if (_current.layers && Array.isArray(_current.layers)) {\r\n        _current.layers.forEach(layer => {\r\n          if (this.cssContext.identify(layer)) {\r\n            const name = `${(layer as any).css.className}`;\r\n            const rules: string[] = [];\r\n            Object.entries((layer.css as any).rules).forEach(\r\n              ([prop, value]) => {\r\n                rules.push(`${prop}: ${value};`);\r\n              }\r\n            );\r\n            content(name, rules);\r\n\r\n            computeStyle(layer, [\r\n              {\r\n                className: `${(layer as any).css.className}`,\r\n                declarations: rules\r\n              }\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    computeStyle(current, styles);\r\n  }\r\n\r\n  /**\r\n   * This will optimize the AST to 'better' css\r\n   * Basic concepts is to loop through ast and verify current & next\r\n   * declaration.\r\n   *\r\n   * When equals css declarations found this will be placed\r\n   * in a seperate css class\r\n   * @param stylesAst sketch ast\r\n   */\r\n  postProcessCss(stylesAst: StyleList[]): void {\r\n    const duplicates = [];\r\n    for (\r\n      let currentIndex = 0;\r\n      currentIndex < stylesAst.length;\r\n      currentIndex++\r\n    ) {\r\n      let checkingDecIndex = currentIndex;\r\n      const currentDeclaration: StyleList = stylesAst[currentIndex];\r\n      const currentDeclarationSet = new Set<string>(\r\n        currentDeclaration.declarations.sort()\r\n      );\r\n      while (++checkingDecIndex < stylesAst.length) {\r\n        const nextDeclaration = stylesAst[checkingDecIndex];\r\n        const checkDeclarationpropertieset = new Set<string>(\r\n          nextDeclaration.declarations.sort()\r\n        );\r\n\r\n        for (const key of Array.from(currentDeclarationSet.values())) {\r\n          if (checkDeclarationpropertieset.has(key)) {\r\n            duplicates.push({\r\n              className: `${currentDeclaration.className}, .${nextDeclaration.className}`,\r\n              key\r\n            });\r\n            checkDeclarationpropertieset.delete(key);\r\n            currentDeclarationSet.delete(key);\r\n          }\r\n        }\r\n\r\n        this.setValuesInAst(\r\n          stylesAst,\r\n          currentIndex,\r\n          currentDeclarationSet,\r\n          checkingDecIndex,\r\n          checkDeclarationpropertieset\r\n        );\r\n      }\r\n    }\r\n    this.reduceDuplicates(duplicates, stylesAst);\r\n  }\r\n\r\n  /**\r\n   * Will remove the duplicates from ast\r\n   * @param duplicates duplicaye css styles\r\n   * @param stylesAst sketch ast\r\n   */\r\n  private reduceDuplicates(\r\n    duplicates: { className: string; key: string }[],\r\n    stylesAst: StyleList[]\r\n  ) {\r\n    const deDuplicateCssValues: Object = duplicates.reduce(\r\n      (current, next, index, _array) => {\r\n        if (index === 0 || !current.hasOwnProperty(next.className)) {\r\n          current[next.className] = {\r\n            className: next.className,\r\n            declarations: [next.key]\r\n          };\r\n        } else {\r\n          current[next.className].declarations = [\r\n            ...current[next.className].declarations,\r\n            ...[next.key]\r\n          ];\r\n        }\r\n        return current;\r\n      },\r\n      {}\r\n    );\r\n\r\n    Object.values(deDuplicateCssValues)\r\n      .filter(e => e.declarations.length > 0)\r\n      .map(e =>\r\n        stylesAst.push({ className: e.className, declarations: e.declarations })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Helper function to set declaration for each css declaration\r\n   * @param stylesAst\r\n   * @param currentIndex\r\n   * @param currentDeclarationSet\r\n   * @param checkingDecIndex\r\n   * @param checkDeclarationpropertieset\r\n   */\r\n  private setValuesInAst(\r\n    stylesAst: StyleList[],\r\n    currentIndex: number,\r\n    currentDeclarationSet: Set<string>,\r\n    checkingDecIndex: number,\r\n    checkDeclarationpropertieset: Set<string>\r\n  ) {\r\n    stylesAst[currentIndex].declarations = Object.assign(\r\n      Array.from(currentDeclarationSet.values())\r\n    );\r\n    stylesAst[checkingDecIndex].declarations = Object.assign(\r\n      Array.from(checkDeclarationpropertieset.values())\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CssContextService } from './css-context.service';\r\nimport { CssParserService } from './css-parser.service';\r\nimport { CssAggregatorService } from './css-aggregator.service';\r\nimport { CssCodeGenOptions } from './css-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssCodeGenService {\r\n  constructor(\r\n    private cssContext: CssContextService,\r\n    private cssParser: CssParserService,\r\n    private cssAggretatorService: CssAggregatorService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options?: CssCodeGenOptions\r\n  ) {\r\n    this.cssParser.compute(current, data, this.compileOptions(options));\r\n  }\r\n\r\n  aggregate(current: SketchMSLayer, options?: CssCodeGenOptions) {\r\n    return this.cssAggretatorService.aggregate(\r\n      current,\r\n      this.compileOptions(options)\r\n    );\r\n  }\r\n\r\n  identify(current: SketchMSLayer) {\r\n    return this.cssContext.identify(current);\r\n  }\r\n\r\n  context(current: SketchMSLayer) {\r\n    return this.cssContext.of(current);\r\n  }\r\n\r\n  private compileOptions(options: CssCodeGenOptions) {\r\n    return {\r\n      generateClassName: true,\r\n      cssPrefix: 'xly_',\r\n      componentDir: 'components',\r\n      ...options\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SketchLibModule } from '@xlayers/sketch-lib';\r\n\r\n@NgModule({\r\n  imports: [SketchLibModule]\r\n})\r\nexport class CssCodeGenModule {}\r\n"]}