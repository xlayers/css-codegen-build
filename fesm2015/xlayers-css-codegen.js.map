{"version":3,"file":"xlayers-css-codegen.js","sources":["ng://@xlayers/css-codegen/lib/css-context.service.ts","ng://@xlayers/css-codegen/lib/css-parser.service.ts","ng://@xlayers/css-codegen/lib/css-aggregator.service.ts","ng://@xlayers/css-codegen/lib/css-codegen.service.ts","ng://@xlayers/css-codegen/lib/css-codegen.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CssCodeGenContext } from './css-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssContextService {\r\n  identify(current: SketchMSLayer) {\r\n    return [\r\n      'rect',\r\n      'page',\r\n      'rectangle',\r\n      'group',\r\n      'oval',\r\n      'slice',\r\n      'MSImmutableHotspotLayer',\r\n      'text',\r\n      'triangle',\r\n      'shapePath',\r\n      'shapeGroup'\r\n    ].includes(current._class as string);\r\n  }\r\n\r\n  of(current: SketchMSLayer) {\r\n    return (current as any).css;\r\n  }\r\n\r\n  put(current: SketchMSLayer, nextContext: CssCodeGenContext) {\r\n    (current as any).css = { ...this.of(current), ...nextContext };\r\n  }\r\n\r\n  clear(current: SketchMSLayer) {\r\n    delete (current as any).web;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LayerService, StyleService, SymbolService } from '@xlayers/sketch-lib';\r\n\r\nimport { CssCodeGenOptions } from './css-codegen';\r\nimport { CssContextService } from './css-context.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssParserService {\r\n  constructor(\r\n    private styleHelperService: StyleService,\r\n    private cssContext: CssContextService,\r\n    private readonly symbolService: SymbolService,\r\n    private readonly layerService: LayerService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (current._class === 'page') {\r\n      current.layers.forEach(layer => {\r\n        this.flattenLayer(layer);\r\n        this.visit(layer, data, options);\r\n      });\r\n    } else {\r\n      this.visit(current, data, options);\r\n    }\r\n  }\r\n\r\n  private flattenLayer(current: SketchMSLayer) {\r\n    current.frame.x = 0;\r\n    current.frame.y = 0;\r\n  }\r\n\r\n  private walk(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (this.layerService.identify(current)) {\r\n      current.layers.forEach(layer => {\r\n        this.visit(layer, data, options);\r\n      });\r\n    } else if (this.symbolService.identify(current)) {\r\n      return this.visitSymbol(current, data, options);\r\n    }\r\n  }\r\n\r\n  private visit(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    if (options.force) {\r\n      this.cssContext.clear(current);\r\n    }\r\n    if (this.cssContext.identify(current)) {\r\n      if (!this.cssContext.of(current)) {\r\n        this.visitContent(current, options);\r\n      }\r\n    }\r\n    this.walk(current, data, options);\r\n  }\r\n\r\n  private visitSymbol(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: CssCodeGenOptions\r\n  ) {\r\n    const symbolMaster = this.symbolService.lookup(current, data);\r\n    if (symbolMaster) {\r\n      this.compute(symbolMaster, data, options);\r\n    }\r\n  }\r\n\r\n  private visitContent(current: SketchMSLayer, options: CssCodeGenOptions) {\r\n    if (options.generateClassName) {\r\n      this.cssContext.put(current, {\r\n        className: this.generateCssClassName(options)\r\n      });\r\n    }\r\n\r\n    switch (current._class as string) {\r\n      case 'rectangle':\r\n        this.visitRectangleStyle(current);\r\n        break;\r\n\r\n      case 'text':\r\n        this.visitTextStyle(current);\r\n        break;\r\n\r\n      case 'oval':\r\n        this.visitOvalStyle(current);\r\n        break;\r\n\r\n      default:\r\n        this.visitLayerStyle(current);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private visitLayerStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractRotation(current),\r\n        ...this.extractBorderRadius(current),\r\n        ...this.extractOpacity(current)\r\n      }\r\n    });\r\n  }\r\n\r\n  private visitRectangleStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractBorders(current),\r\n        ...this.extractFills(current),\r\n        ...this.extractShadows(current)\r\n      },\r\n      pseudoElements: { before: this.extractBlurPseudoElement(current) }\r\n    });\r\n  }\r\n\r\n  private visitOvalStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.addOvalShape(),\r\n        ...this.extractFrame(current),\r\n        ...this.extractBorders(current),\r\n        ...this.extractFills(current),\r\n        ...this.extractShadows(current)\r\n      },\r\n      pseudoElements: { before: this.extractBlurPseudoElement(current) }\r\n    });\r\n  }\r\n\r\n  private visitTextStyle(current: SketchMSLayer) {\r\n    this.cssContext.put(current, {\r\n      rules: {\r\n        ...this.extractFrame(current),\r\n        ...this.extractTextFont(current),\r\n        ...this.extractTextColor(current),\r\n        ...this.extractParagraphStyle(current)\r\n      }\r\n    });\r\n  }\r\n\r\n  private extractFrame(current: SketchMSLayer) {\r\n    if (current.frame) {\r\n      return {\r\n        display: 'block',\r\n        position: 'absolute',\r\n        left: `${current.frame.x}px`,\r\n        top: `${current.frame.y}px`,\r\n        width: `${current.frame.width}px`,\r\n        height: `${current.frame.height}px`,\r\n        visibility: current.isVisible ? 'visible' : 'hidden'\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  private extractTextColor(current: SketchMSLayer) {\r\n    const obj = current.style.textStyle.encodedAttributes;\r\n\r\n    if (obj.hasOwnProperty('MSAttributedStringColorAttribute')) {\r\n      return {\r\n        color: this.styleHelperService.parseColorAsRgba(\r\n          obj.MSAttributedStringColorAttribute\r\n        )\r\n      };\r\n    } else if (obj.hasOwnProperty('NSColor')) {\r\n      // TODO: Handle legacy\r\n      // const archive =\r\n      // this.binaryPlistParser.parse64Content(obj.NSColor._archive);\r\n      // (scope.style.textStyle.encodedAttributes.NSColor as any)._transformed =\r\n      // archive;\r\n      return {};\r\n    }\r\n\r\n    return { color: 'black' };\r\n  }\r\n\r\n  private extractParagraphStyle(current: SketchMSLayer) {\r\n    const obj = current.style.textStyle.encodedAttributes;\r\n\r\n    if (obj.hasOwnProperty('NSParagraphStyle')) {\r\n      // TODO: Handle legacy\r\n      // const archive =\r\n      // this.binaryPlistParser.parse64Content(scope.style.textStyle.encodedAttributes.NSParagraphStyle._archive);\r\n      // (scope.style.textStyle.encodedAttributes.NSParagraphStyle as\r\n      // any)._transformed = archive;\r\n      return {};\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractTextFont(current: SketchMSLayer) {\r\n    const obj =\r\n      current.style.textStyle.encodedAttributes.MSAttributedStringFontAttribute;\r\n\r\n    if (obj.hasOwnProperty('_class') && obj._class === 'fontDescriptor') {\r\n      return {\r\n        'font-family': `'${obj.attributes.name}', 'Roboto', 'sans-serif'`,\r\n        'font-size': `${obj.attributes.size}px`\r\n      };\r\n    } else if (obj.hasOwnProperty('_archive')) {\r\n      // TODO: Handle legacy\r\n      // const archive = this.binaryPlistParser.parse64Content(obj._archive);\r\n      // (scope.style.textStyle.encodedAttributes.MSAttributedStringFontAttribute\r\n      // as any)._transformed = archive;\r\n      return {};\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private addOvalShape() {\r\n    return { 'border-radius': '50%' };\r\n  }\r\n\r\n  private extractOpacity(current: SketchMSLayer) {\r\n    return (current as any).opacity\r\n      ? { opacity: `${(current as any).opacity}` }\r\n      : {};\r\n  }\r\n\r\n  private extractBorderRadius(current: SketchMSLayer) {\r\n    const obj = (current as any).fixedRadius;\r\n    return obj ? { 'border-radius': `${obj.fixedRadius}px` } : {};\r\n  }\r\n\r\n  private extractRotation(current: SketchMSLayer) {\r\n    const obj = (current as any).rotation;\r\n    return obj ? { transform: `rotate(${current.rotation}deg)` } : {};\r\n  }\r\n\r\n  private extractBlurPseudoElement(current: SketchMSLayer) {\r\n    const obj = (current as any).style.blur;\r\n    if (obj && obj.hasOwnProperty('radius') && obj.radius > 0) {\r\n      const objFill = (current as any).style.fills;\r\n\r\n      if (objFill && objFill.length > 0) {\r\n        // we only support one fill: take the first one!\r\n        // ignore the other fills\r\n        const firstFill = objFill[0];\r\n\r\n        if (firstFill.isEnabled) {\r\n          const fillColor = this.styleHelperService.parseColorAsRgba(\r\n            firstFill.color\r\n          );\r\n\r\n          return {\r\n            height: `${current.frame.height + 50}px`,\r\n            width: `${current.frame.width + 50}px`,\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            top: '-25px',\r\n            left: '-25px',\r\n            bottom: '0',\r\n            right: '0',\r\n            background: 'inherit',\r\n            'box-shadow': `inset 0 0 0 ${current.frame.width /\r\n              2}px ${fillColor}`,\r\n            filter: `blur(${obj.radius.toFixed(2)}px)`\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractBorders(current: SketchMSLayer) {\r\n    enum BorderType {\r\n      INSIDE = 1,\r\n      OUTSIDE = 2,\r\n      CENTER = 0\r\n    }\r\n\r\n    const obj = (current as any).style.borders;\r\n\r\n    if (obj && obj.length > 0) {\r\n      const bordersStyles = obj.reduce((acc, border) => {\r\n        if (border.thickness > 0) {\r\n          const borderColor = this.styleHelperService.parseColorAsRgba(\r\n            border.color\r\n          );\r\n          const inset = border.position === BorderType.INSIDE ? 'inset' : '';\r\n          const shadow = [\r\n            `0 0 0 ${border.thickness}px ${borderColor}`,\r\n            inset\r\n          ].join(' ');\r\n\r\n          return [shadow, ...acc];\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      if (bordersStyles.length > 0) {\r\n        return { 'box-shadow': bordersStyles.join(',') };\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractFills(current: SketchMSLayer) {\r\n    const obj = (current as any).style.fills;\r\n\r\n    if (obj && obj.length > 0) {\r\n      // we only support one fill: take the first one!\r\n      // ignore the other fills\r\n      const firstFill = obj[0];\r\n\r\n      if (firstFill.isEnabled) {\r\n        const fillColor = this.styleHelperService.parseColorAsRgba(\r\n          firstFill.color\r\n        );\r\n\r\n        const blurObj = (current as any).style.blur;\r\n        if (blurObj && blurObj.hasOwnProperty('radius') && blurObj.radius > 0) {\r\n          return {\r\n            ...this.extractFillGradient(firstFill),\r\n            background: 'inherit',\r\n            overflow: 'hidden',\r\n            'background-color': fillColor\r\n          };\r\n        } else {\r\n          return {\r\n            ...this.extractFillGradient(firstFill),\r\n            'background-color': fillColor\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractFillGradient(fill) {\r\n    if (fill.gradient) {\r\n      const fillsStyles = fill.gradient.stops.map(stop => {\r\n        const position =\r\n          stop.position >= 0 && stop.position <= 1\r\n            ? ` ${stop.position * 100}%`\r\n            : '';\r\n        const fillColor = this.styleHelperService.parseColorAsRgba(stop.color);\r\n\r\n        return `${fillColor}${position}`;\r\n      });\r\n\r\n      if (fillsStyles.length > 0) {\r\n        // apply gradient, if multiple fills\r\n        // default angle is 90deg\r\n        return {\r\n          background: `linear-gradient(90deg, ${fillsStyles.join(',')})`\r\n        };\r\n      }\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  private extractShadows(current: SketchMSLayer) {\r\n    const innerShadow = this.extractInnerShadow(current);\r\n    const outterShadow = this.extractOuterShadow(current);\r\n\r\n    return innerShadow + outterShadow !== ''\r\n      ? { 'box-shadow': innerShadow + outterShadow }\r\n      : {};\r\n  }\r\n\r\n  private extractInnerShadow(current: SketchMSLayer) {\r\n    const innerShadows = (current as any).style.innerShadows;\r\n\r\n    if (innerShadows) {\r\n      return innerShadows.map(innerShadow => {\r\n        const shadowColor = this.styleHelperService.parseColorAsRgba(\r\n          innerShadow.color\r\n        );\r\n\r\n        return [\r\n          `${innerShadow.offsetX}px`,\r\n          `${innerShadow.offsetY}px`,\r\n          `${innerShadow.blurRadius}px`,\r\n          `${innerShadow.spread}px`,\r\n          `${shadowColor}`,\r\n          `inset`\r\n        ].join(' ');\r\n      });\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private extractOuterShadow(current: SketchMSLayer) {\r\n    const outerShadows = (current as any).style.shadows;\r\n    if (outerShadows) {\r\n      return outerShadows.map(shadow => {\r\n        const shadowColor = this.styleHelperService.parseColorAsRgba(\r\n          shadow.color\r\n        );\r\n\r\n        return [\r\n          `${shadow.offsetX}px`,\r\n          `${shadow.offsetY}px`,\r\n          `${shadow.blurRadius}px`,\r\n          `${shadow.spread}px`,\r\n          `${shadowColor}`\r\n        ].join(' ');\r\n      });\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private generateCssClassName(options: CssCodeGenOptions) {\r\n    const randomString = Math.random()\r\n      .toString(36)\r\n      .substring(2, 6);\r\n\r\n    return `${options.cssPrefix}${randomString}`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CssContextService } from './css-context.service';\r\nimport { CssCodeGenOptions } from './css-codegen';\r\nimport { FormatService } from '@xlayers/sketch-lib';\r\n\r\ninterface StyleList {\r\n  className: string;\r\n  declarations: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssAggregatorService {\r\n  constructor(\r\n    private readonly formatService: FormatService,\r\n    private cssContext: CssContextService\r\n  ) {}\r\n\r\n  private indentationSymbol = `  `; // 2 spaces ftw\r\n  // default host style\r\n  private hostStyle = [\r\n    ':host {',\r\n    `${this.indentationSymbol}display: block;`,\r\n    `${this.indentationSymbol}position: relative;`,\r\n    '}',\r\n    ''\r\n  ].join('\\n');\r\n\r\n  /**\r\n   * This will parse the ast to return a optimized css stylesheet\r\n   * @param current SketchMSLayer the ast based on sketch json\r\n   */\r\n  aggregate(current: SketchMSLayer, options?: CssCodeGenOptions) {\r\n    const styles: Array<StyleList> = [];\r\n    this.buildAstStyleSheet(styles, current);\r\n    this.postProcessCss(styles);\r\n    this.buildPseudoElementStyle(styles, current);\r\n    const reGenerateStyleSheet = this.reGenerateStyleSheet(styles);\r\n\r\n    const fileName = this.formatService.normalizeName(current.name);\r\n    return [\r\n      {\r\n        kind: 'css',\r\n        value: this.combineStyles(reGenerateStyleSheet),\r\n        language: 'css',\r\n        uri: `${options.componentDir}/${fileName}.css`\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * The complete string of css style\r\n   * @param styles string of stylesheet\r\n   */\r\n  private combineStyles(styles: string): string {\r\n    return `${this.hostStyle} \\n${styles}`;\r\n  }\r\n\r\n  /**\r\n   * Map over styles with normal css output\r\n   * @param styles optimized list of styles\r\n   */\r\n  private reGenerateStyleSheet(styles: StyleList[]) {\r\n    return styles\r\n      .filter(e => e.declarations.length > 0)\r\n      .map(cssStyle => this.generateCssStyle(cssStyle).join('\\n'))\r\n      .join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Parse stylelist to understandable css class definition\r\n   * @param style the declaration of style\r\n   */\r\n  private generateCssStyle(style: StyleList): string[] {\r\n    return [\r\n      `.${style.className} {`,\r\n      style.declarations.map(rule => this.indentationSymbol + rule).join('\\n'),\r\n      '}',\r\n      ''\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Parse style pseudo element without any pre processing\r\n   * @param styles curent created list\r\n   * @param current  sketch ast\r\n   */\r\n  private buildPseudoElementStyle(styles: StyleList[], current: SketchMSLayer) {\r\n    const computeStyle = (_current: SketchMSLayer) => {\r\n      const content = (name: string, data: string[]) => {\r\n        if (data) {\r\n          styles.push({ className: name, declarations: data });\r\n        }\r\n      };\r\n      if (_current.layers && Array.isArray(_current.layers)) {\r\n        _current.layers.forEach(layer => {\r\n          if (this.cssContext.identify(layer)) {\r\n            const name = `${(layer as any).css.className}`;\r\n            if ((layer.css as any).pseudoElements) {\r\n              Object.entries((layer.css as any).pseudoElements).forEach(\r\n                ([prop, value]) => {\r\n                  content(\r\n                    `${name}:${prop}`,\r\n                    Object.entries(value).map(\r\n                      ([ruleKey, ruleValue]) => `${ruleKey}: ${ruleValue};`\r\n                    )\r\n                  );\r\n                }\r\n              );\r\n\r\n              computeStyle(layer);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    computeStyle(current);\r\n  }\r\n\r\n  /**\r\n   * This is the main ast parser to go from sketch to css\r\n   * @param styles newly created list\r\n   * @param current  sketch ast\r\n   */\r\n  private buildAstStyleSheet(\r\n    styles: StyleList[],\r\n    current: SketchMSLayer\r\n  ): void {\r\n    const computeStyle = (_current: SketchMSLayer, _styles) => {\r\n      const content = (name: string, data: string[]) => {\r\n        if (data) {\r\n          styles.push({ className: name, declarations: data });\r\n        }\r\n      };\r\n      if (_current.layers && Array.isArray(_current.layers)) {\r\n        _current.layers.forEach(layer => {\r\n          if (this.cssContext.identify(layer)) {\r\n            const name = `${(layer as any).css.className}`;\r\n            const rules: string[] = [];\r\n            Object.entries((layer.css as any).rules).forEach(\r\n              ([prop, value]) => {\r\n                rules.push(`${prop}: ${value};`);\r\n              }\r\n            );\r\n            content(name, rules);\r\n\r\n            computeStyle(layer, [\r\n              {\r\n                className: `${(layer as any).css.className}`,\r\n                declarations: rules\r\n              }\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    computeStyle(current, styles);\r\n  }\r\n\r\n  /**\r\n   * This will optimize the AST to 'better' css\r\n   * Basic concepts is to loop through ast and verify current & next\r\n   * declaration.\r\n   *\r\n   * When equals css declarations found this will be placed\r\n   * in a seperate css class\r\n   * @param stylesAst sketch ast\r\n   */\r\n  postProcessCss(stylesAst: StyleList[]): void {\r\n    const duplicates = [];\r\n    for (\r\n      let currentIndex = 0;\r\n      currentIndex < stylesAst.length;\r\n      currentIndex++\r\n    ) {\r\n      let checkingDecIndex = currentIndex;\r\n      const currentDeclaration: StyleList = stylesAst[currentIndex];\r\n      const currentDeclarationSet = new Set<string>(\r\n        currentDeclaration.declarations.sort()\r\n      );\r\n      while (++checkingDecIndex < stylesAst.length) {\r\n        const nextDeclaration = stylesAst[checkingDecIndex];\r\n        const checkDeclarationpropertieset = new Set<string>(\r\n          nextDeclaration.declarations.sort()\r\n        );\r\n\r\n        for (const key of Array.from(currentDeclarationSet.values())) {\r\n          if (checkDeclarationpropertieset.has(key)) {\r\n            duplicates.push({\r\n              className: `${currentDeclaration.className}, .${nextDeclaration.className}`,\r\n              key\r\n            });\r\n            checkDeclarationpropertieset.delete(key);\r\n            currentDeclarationSet.delete(key);\r\n          }\r\n        }\r\n\r\n        this.setValuesInAst(\r\n          stylesAst,\r\n          currentIndex,\r\n          currentDeclarationSet,\r\n          checkingDecIndex,\r\n          checkDeclarationpropertieset\r\n        );\r\n      }\r\n    }\r\n    this.reduceDuplicates(duplicates, stylesAst);\r\n  }\r\n\r\n  /**\r\n   * Will remove the duplicates from ast\r\n   * @param duplicates duplicaye css styles\r\n   * @param stylesAst sketch ast\r\n   */\r\n  private reduceDuplicates(\r\n    duplicates: { className: string; key: string }[],\r\n    stylesAst: StyleList[]\r\n  ) {\r\n    const deDuplicateCssValues: Object = duplicates.reduce(\r\n      (current, next, index, _array) => {\r\n        if (index === 0 || !current.hasOwnProperty(next.className)) {\r\n          current[next.className] = {\r\n            className: next.className,\r\n            declarations: [next.key]\r\n          };\r\n        } else {\r\n          current[next.className].declarations = [\r\n            ...current[next.className].declarations,\r\n            ...[next.key]\r\n          ];\r\n        }\r\n        return current;\r\n      },\r\n      {}\r\n    );\r\n\r\n    Object.values(deDuplicateCssValues)\r\n      .filter(e => e.declarations.length > 0)\r\n      .map(e =>\r\n        stylesAst.push({ className: e.className, declarations: e.declarations })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Helper function to set declaration for each css declaration\r\n   * @param stylesAst\r\n   * @param currentIndex\r\n   * @param currentDeclarationSet\r\n   * @param checkingDecIndex\r\n   * @param checkDeclarationpropertieset\r\n   */\r\n  private setValuesInAst(\r\n    stylesAst: StyleList[],\r\n    currentIndex: number,\r\n    currentDeclarationSet: Set<string>,\r\n    checkingDecIndex: number,\r\n    checkDeclarationpropertieset: Set<string>\r\n  ) {\r\n    stylesAst[currentIndex].declarations = Object.assign(\r\n      Array.from(currentDeclarationSet.values())\r\n    );\r\n    stylesAst[checkingDecIndex].declarations = Object.assign(\r\n      Array.from(checkDeclarationpropertieset.values())\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CssContextService } from './css-context.service';\r\nimport { CssParserService } from './css-parser.service';\r\nimport { CssAggregatorService } from './css-aggregator.service';\r\nimport { CssCodeGenOptions } from './css-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CssCodeGenService {\r\n  constructor(\r\n    private cssContext: CssContextService,\r\n    private cssParser: CssParserService,\r\n    private cssAggretatorService: CssAggregatorService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options?: CssCodeGenOptions\r\n  ) {\r\n    this.cssParser.compute(current, data, this.compileOptions(options));\r\n  }\r\n\r\n  aggregate(current: SketchMSLayer, options?: CssCodeGenOptions) {\r\n    return this.cssAggretatorService.aggregate(\r\n      current,\r\n      this.compileOptions(options)\r\n    );\r\n  }\r\n\r\n  identify(current: SketchMSLayer) {\r\n    return this.cssContext.identify(current);\r\n  }\r\n\r\n  context(current: SketchMSLayer) {\r\n    return this.cssContext.of(current);\r\n  }\r\n\r\n  private compileOptions(options: CssCodeGenOptions) {\r\n    return {\r\n      generateClassName: true,\r\n      cssPrefix: 'xly_',\r\n      componentDir: 'components',\r\n      ...options\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SketchLibModule } from '@xlayers/sketch-lib';\r\n\r\n@NgModule({\r\n  imports: [SketchLibModule]\r\n})\r\nexport class CssCodeGenModule {}\r\n"],"names":[],"mappings":"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"}